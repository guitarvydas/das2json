swib {
  main [spaces firstRule moreRule*] = ‛«firstRule»«moreRule»

import receptor
_r = receptor.Receptor ()
⎛«firstRule»⎠ (_r)
s = _r.pop_return_value ()
print (s)
’
  rule_return_value [_colon spaces rulename _ret_eq spaces2 pattern+] =‛
def «rulename» (_r):(-
    _r.push_new_string ()
    _r.begin_breadcrumb ("«rulename»")
    «pattern»_r.end_breadcrumb ("«rulename»")
    return _r.return_string_pop ()-)\n’

  rule_rewrite_value [_colon spaces rulename _ret_at spaces2 pattern+] =‛
def «rulename» (_r):(-
    _r.push_new_string ()
    _r.begin_breadcrumb ("«rulename»")
    «pattern»_r.end_breadcrumb ("«rulename»")
    return _r.return_string_pop ()-)\n’
  
  pattern [p] = ‛«p»’

  endop [_end spaces] = ‛_r.eof ()\n’

  rulename [name spaces] = ‛«name»’

  rulecall [name spaces] = ‛«name» (_r)\n_r.append_returned_string ()\n’
  
  stringMatch [s ws] = ‛_r.need_and_append («s»)\n’

  string [dq1 notdq* dq2] = ‛"«notdq»"’
  dq [q] = ‛«q»’
  notdq_escaped [_bs c] = ‛«_bs»«c»’
  notdq_raw [c] = ‛«c»’

  cond [lb spaces1 condClause+ rb spaces2] = ‛if False:(-\npass-)\n«condClause»’
  condClause [_bar spaces1 condMatch _colon spaces2 action*] = ‛elif «condMatch»:(-\n«action»pass-)\n’
  condMatch_string [x] = ‛_r.maybe_append («x»)’
  condMatch_endop [x] = ‛_r.eof ()’
  condMatch_else [x] = ‛True’

  peekcond [lb spaces1 condClause+ rb spaces2] = ‛if False:(-\npass-)\n«condClause»’
  peekCondClause [_bar spaces1 condMatch _colon spaces2 action*] = ‛elif «condMatch»:(-\n«action»pass-)\n’
  peekCondMatch_string [x] = ‛_r.peek («x»)’
  peekCondMatch_endop [x] = ‛_r.eof ()’
  peekCondMatch_else [x] = ‛True’

  action [a] = ‛«a»’
  break [_break spaces] = ‛break\n’
  acceptAndAppend [_dot spaces] = ‛_r.accept_and_append ()\n’

  cycle [lb spaces1 pattern+ rb spaces2] = ‛while True:(-\n«pattern»-)\n’

  name [firstLetter moreLetter*] = ‛«firstLetter»«moreLetter»’
  firstLetter [c] = ‛«c»’
  moreLetter [c] = ‛«c»’

}

